<?php


function simple_twitter_timeline_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Simple Twitter Timeline'),
      'weight' => 0,
      'status' => 1,
      'region' => 'left',
    );

    return $blocks;
  }
  else if ($op == 'configure' && $delta == 0) {
    $form['twitteruser'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter Username'),
      '#description' => t('Enter a user to pull twitter timeline from'),
      '#default_value' => variable_get('simple_twitter_timeline_twitteruser', ''),
    );

    $form['no_tweets'] = array(
      '#type' => 'textfield',
      '#title' => t('Number or tweets to display'),
      '#default_value' => variable_get('simple_twitter_timeline_no_tweets', 0),
    );

    $form['consumer_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter App Consumer Key'),
      '#default_value' => variable_get('simple_twitter_timeline_consumer_key', 0),
    );
    $form['consumer_secret'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter App Consumer Secret'),
      '#default_value' => variable_get('simple_twitter_timeline_consumer_secret', 0),
    );
    $form['access_token'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter App Access Token'),
      '#default_value' => variable_get('simple_twitter_timeline_access_token', 0),
    );
    $form['access_token_secret'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter App Access Token Secret'),
      '#default_value' => variable_get('simple_twitter_timeline_access_token_secret', 0),
    );

    return $form;
  }
  else if ($op == 'save' && $delta == 0) {
    variable_set('simple_twitter_timeline_twitteruser', $edit['twitteruser']);
    variable_set('simple_twitter_timeline_no_tweets', $edit['no_tweets']);
    variable_set('simple_twitter_timeline_consumer_key', $edit['consumer_key']);
    variable_set('simple_twitter_timeline_consumer_secret', $edit['consumer_secret']);
    variable_set('simple_twitter_timeline_access_token', $edit['access_token']);
    variable_set('simple_twitter_timeline_access_token_secret', $edit['access_token_secret']);
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 0:
        // Your module will need to define this function to render the block.
        $block = array(
          'subject' => '',
          'content' => simple_twitter_timeline_block_contents(),
        );
        break;
    }
    return $block;
  }
}

function simple_twitter_timeline_block_contents() {
  $tweets = simple_twitter_timeline_get_tweets();

  $output = '<div id="simple_twitter_timeline_header">';
  $output .= '<h2>On Twitter</h2>';
  $output .= '</div>';

  if ( $tweets ) {
    $output .= '<ul class="simple_twitter_timeline_tweets">';
    foreach ( $tweets as $tweet ) {
      $output .= '<li>' . $tweet . '</li>';
    }
    $output .= '</ul>';
    return $output;
  }
  return $tweets;
}

function simple_twitter_timeline_get_tweets() {
  module_load_include('php', 'simple_twitter_timeline', 'tmhOAuth/tmhOAuth');

  $tmhOAuth = new tmhOAuth(array(
    'consumer_key'    => variable_get('simple_twitter_timeline_consumer_key', 0),
    'consumer_secret' => variable_get('simple_twitter_timeline_consumer_secret', 0),
    'user_token'      => variable_get('simple_twitter_timeline_access_token', 0),
    'user_secret'     => variable_get('simple_twitter_timeline_access_token_secret', 0),
  ));

  $tmhOAuth->request('GET', $tmhOAuth->url('1.1/statuses/user_timeline'),
    array(
      'screen_name' => variable_get('simple_twitter_timeline_twitteruser', ''),
      'count' => variable_get('simple_twitter_timeline_no_tweets', 0),
    )
  );
  if ( isset($tmhOAuth->response) ) {
    $response = $tmhOAuth->response;
    $data = json_decode($response['response']);
    if ( count($data->errors) > 0 ) {
      watchdog('simple_twitter_timeline', 'Bad results fetched');
      return false;
    }
    else {
      $tweets = array();
      foreach ( $data as $tweet_obj ) {
        $tweets[] = simple_twitter_timeline_render_tweet($tweet_obj);
      }
      return $tweets;
    }
  }

  return false;
}


function simple_twitter_timeline_render_tweet($item, $options = array()) {
  $options = array_merge(
    array(
      'dateFormat' => "F j g:i a",
      'linkUrls' => true,
      'linkHashTags' => true,
      'linkAtTags' => true,
      'showDate' => '', // should be 'before', 'after', or blank to not show
      'listItemDateOpen' => " <span class='date'>",
      'listItemDateClose' => "</span>",
      'listItemLinkOpen' => "<a href='{href}'>",
      'listItemLinkClose' => "</a>",
    ),
    $options
  );

  $text = $item->text;
  if ( $options['linkHashTags'] ) {
    $text = preg_replace('/(^|\s)#(\w*[a-zA-Z_]+\w*)/', '\1#<a href="https://twitter.com/search?q=%23\2&src=hash" target="_blank">\2</a>', $text);
  }
  if ( $options['linkAtTags'] ) {
    $text = preg_replace('/(^|\s)@(\w*[a-zA-Z_]+\w*)/', '\1@<a href="https://twitter.com/\2" target="_blank">\2</a>', $text);
  }

  $text = html_entity_decode($text, ENT_QUOTES, 'UTF-8');
  $text = $text;

  foreach ( $item->entities->urls as $u ) {
    if($options['linkUrls']) {
      $linkOpen = str_replace('{href}', $u->expanded_url, $options['listItemLinkOpen']);
      $text = preg_replace('!' . preg_quote($u->url, '!') . '(\b|$)!i', $linkOpen . $u->display_url . $options['listItemLinkClose'], $text);
    } else {
      $text = preg_replace('!' . preg_quote($u->url, '!') . '(\b|$)!i', $u->display_url, $text);
    }

  }

  if($options['showDate']) {
    $date = strtotime($item->created_at);
    if(strpos($options['dateFormat'], '%') !== false) $date = strftime($options['dateFormat'], $date);
      else $date = date($options['dateFormat'], $date);
    $dateOut = $options['listItemDateOpen'] . $date . $options['listItemDateClose'];
    if($options['showDate'] == 'before') {
      $out .= $dateOut;
      $dateOut = '';
    }
  } else $dateOut = '';

  $out .= $text;
  if($dateOut) $out .= $dateOut;

  return $out;
}
